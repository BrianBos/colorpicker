(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Default"] = factory();
	else
		root["ColorPicker"] = root["ColorPicker"] || {}, root["ColorPicker"]["Default"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/ts/default-picker.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/deepmerge/dist/umd.js":
/*!********************************************!*\
  !*** ./node_modules/deepmerge/dist/umd.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n\t true ? module.exports = factory() :\n\tundefined;\n}(this, (function () { 'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, optionsArgument) {\n\tvar clone = !optionsArgument || optionsArgument.clone !== false;\n\n\treturn (clone && isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, optionsArgument)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, optionsArgument) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, optionsArgument)\n\t})\n}\n\nfunction mergeObject(target, source, optionsArgument) {\n\tvar destination = {};\n\tif (isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], optionsArgument);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], optionsArgument);\n\t\t} else {\n\t\t\tdestination[key] = deepmerge(target[key], source[key], optionsArgument);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, optionsArgument) {\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar options = optionsArgument || { arrayMerge: defaultArrayMerge };\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, optionsArgument)\n\t} else if (sourceIsArray) {\n\t\tvar arrayMerge = options.arrayMerge || defaultArrayMerge;\n\t\treturn arrayMerge(target, source, optionsArgument)\n\t} else {\n\t\treturn mergeObject(target, source, optionsArgument)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, optionsArgument) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, optionsArgument)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nreturn deepmerge_1;\n\n})));\n\n\n//# sourceURL=webpack://ColorPicker.Default/./node_modules/deepmerge/dist/umd.js?");

/***/ }),

/***/ "./node_modules/nearest-color/nearestColor.js":
/*!****************************************************!*\
  !*** ./node_modules/nearest-color/nearestColor.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function(context) {\n\n  /**\n   * Defines an available color.\n   *\n   * @typedef {Object} ColorSpec\n   * @property {string=} name A name for the color, e.g., 'red'\n   * @property {string} source The hex-based color string, e.g., '#FF0'\n   * @property {RGB} rgb The {@link RGB} color values\n   */\n\n  /**\n   * Describes a matched color.\n   *\n   * @typedef {Object} ColorMatch\n   * @property {string} name The name of the matched color, e.g., 'red'\n   * @property {string} value The hex-based color string, e.g., '#FF0'\n   * @property {RGB} rgb The {@link RGB} color values.\n   */\n\n  /**\n   * Provides the RGB breakdown of a color.\n   *\n   * @typedef {Object} RGB\n   * @property {number} r The red component, from 0 to 255\n   * @property {number} g The green component, from 0 to 255\n   * @property {number} b The blue component, from 0 to 255\n   */\n\n  /**\n   * Gets the nearest color, from the given list of {@link ColorSpec} objects\n   * (which defaults to {@link nearestColor.DEFAULT_COLORS}).\n   *\n   * Probably you wouldn't call this method directly. Instead you'd get a custom\n   * color matcher by calling {@link nearestColor.from}.\n   *\n   * @public\n   * @param {RGB|string} needle Either an {@link RGB} color or a hex-based\n   *     string representing one, e.g., '#FF0'\n   * @param {Array.<ColorSpec>=} colors An optional list of available colors\n   *     (defaults to {@link nearestColor.DEFAULT_COLORS})\n   * @return {ColorMatch|string} If the colors in the provided list had names,\n   *     then a {@link ColorMatch} object with the name and (hex) value of the\n   *     nearest color from the list. Otherwise, simply the hex value.\n   *\n   * @example\n   * nearestColor({ r: 200, g: 50, b: 50 }); // => '#f00'\n   * nearestColor('#f11');                   // => '#f00'\n   * nearestColor('#f88');                   // => '#f80'\n   * nearestColor('#ffe');                   // => '#ff0'\n   * nearestColor('#efe');                   // => '#ff0'\n   * nearestColor('#abc');                   // => '#808'\n   * nearestColor('red');                    // => '#f00'\n   * nearestColor('foo');                    // => throws\n   */\n  function nearestColor(needle, colors) {\n    needle = parseColor(needle);\n\n    if (!needle) {\n      return null;\n    }\n\n    var distanceSq,\n        minDistanceSq = Infinity,\n        rgb,\n        value;\n\n    colors || (colors = nearestColor.DEFAULT_COLORS);\n\n    for (var i = 0; i < colors.length; ++i) {\n      rgb = colors[i].rgb;\n\n      distanceSq = (\n        Math.pow(needle.r - rgb.r, 2) +\n        Math.pow(needle.g - rgb.g, 2) +\n        Math.pow(needle.b - rgb.b, 2)\n      );\n\n      if (distanceSq < minDistanceSq) {\n        minDistanceSq = distanceSq;\n        value = colors[i];\n      }\n    }\n\n    if (value.name) {\n      return {\n        name: value.name,\n        value: value.source,\n        rgb: value.rgb,\n        distance: Math.sqrt(minDistanceSq)\n      };\n    }\n\n    return value.source;\n  }\n\n  /**\n   * Provides a matcher to find the nearest color based on the provided list of\n   * available colors.\n   *\n   * @public\n   * @param {Array.<string>|Object} availableColors An array of hex-based color\n   *     strings, or an object mapping color *names* to hex values.\n   * @return {function(string):ColorMatch|string} A function with the same\n   *     behavior as {@link nearestColor}, but with the list of colors\n   *     predefined.\n   *\n   * @example\n   * var colors = {\n   *   'maroon': '#800',\n   *   'light yellow': { r: 255, g: 255, b: 51 },\n   *   'pale blue': '#def',\n   *   'white': 'fff'\n   * };\n   *\n   * var bgColors = [\n   *   '#eee',\n   *   '#444'\n   * ];\n   *\n   * var invalidColors = {\n   *   'invalid': 'foo'\n   * };\n   *\n   * var getColor = nearestColor.from(colors);\n   * var getBGColor = getColor.from(bgColors);\n   * var getAnyColor = nearestColor.from(colors).or(bgColors);\n   *\n   * getColor('ffe');\n   * // => { name: 'white', value: 'fff', rgb: { r: 255, g: 255, b: 255 }, distance: 17}\n   *\n   * getColor('#f00');\n   * // => { name: 'maroon', value: '#800', rgb: { r: 136, g: 0, b: 0 }, distance: 119}\n   *\n   * getColor('#ff0');\n   * // => { name: 'light yellow', value: '#ffff33', rgb: { r: 255, g: 255, b: 51 }, distance: 51}\n   *\n   * getBGColor('#fff'); // => '#eee'\n   * getBGColor('#000'); // => '#444'\n   *\n   * getAnyColor('#f00');\n   * // => { name: 'maroon', value: '#800', rgb: { r: 136, g: 0, b: 0 }, distance: 119}\n   *\n   * getAnyColor('#888'); // => '#444'\n   *\n   * nearestColor.from(invalidColors); // => throws\n   */\n  nearestColor.from = function from(availableColors) {\n    var colors = mapColors(availableColors),\n        nearestColorBase = nearestColor;\n\n    var matcher = function nearestColor(hex) {\n      return nearestColorBase(hex, colors);\n    };\n\n    // Keep the 'from' method, to support changing the list of available colors\n    // multiple times without needing to keep a reference to the original\n    // nearestColor function.\n    matcher.from = from;\n\n    // Also provide a way to combine multiple color lists.\n    matcher.or = function or(alternateColors) {\n      var extendedColors = colors.concat(mapColors(alternateColors));\n      return nearestColor.from(extendedColors);\n    };\n\n    return matcher;\n  };\n\n  /**\n   * Given either an array or object of colors, returns an array of\n   * {@link ColorSpec} objects (with {@link RGB} values).\n   *\n   * @private\n   * @param {Array.<string>|Object} colors An array of hex-based color strings, or\n   *     an object mapping color *names* to hex values.\n   * @return {Array.<ColorSpec>} An array of {@link ColorSpec} objects\n   *     representing the same colors passed in.\n   */\n  function mapColors(colors) {\n    if (colors instanceof Array) {\n      return colors.map(function(color) {\n        return createColorSpec(color);\n      });\n    }\n\n    return Object.keys(colors).map(function(name) {\n      return createColorSpec(colors[name], name);\n    });\n  };\n\n  /**\n   * Parses a color from a string.\n   *\n   * @private\n   * @param {RGB|string} source\n   * @return {RGB}\n   *\n   * @example\n   * parseColor({ r: 3, g: 22, b: 111 }); // => { r: 3, g: 22, b: 111 }\n   * parseColor('#f00');                  // => { r: 255, g: 0, b: 0 }\n   * parseColor('#04fbc8');               // => { r: 4, g: 251, b: 200 }\n   * parseColor('#FF0');                  // => { r: 255, g: 255, b: 0 }\n   * parseColor('rgb(3, 10, 100)');       // => { r: 3, g: 10, b: 100 }\n   * parseColor('rgb(50%, 0%, 50%)');     // => { r: 128, g: 0, b: 128 }\n   * parseColor('aqua');                  // => { r: 0, g: 255, b: 255 }\n   * parseColor('fff');                   // => { r: 255, g: 255, b: 255 }\n   * parseColor('foo');                   // => throws\n   */\n  function parseColor(source) {\n    var red, green, blue;\n\n    if (typeof source === 'object') {\n      return source;\n    }\n\n    if (source in nearestColor.STANDARD_COLORS) {\n      return parseColor(nearestColor.STANDARD_COLORS[source]);\n    }\n\n    var hexMatch = source.match(/^#?((?:[0-9a-f]{3}){1,2})$/i);\n    if (hexMatch) {\n      hexMatch = hexMatch[1];\n\n      if (hexMatch.length === 3) {\n        hexMatch = [\n          hexMatch.charAt(0) + hexMatch.charAt(0),\n          hexMatch.charAt(1) + hexMatch.charAt(1),\n          hexMatch.charAt(2) + hexMatch.charAt(2)\n        ];\n\n      } else {\n        hexMatch = [\n          hexMatch.substring(0, 2),\n          hexMatch.substring(2, 4),\n          hexMatch.substring(4, 6)\n        ];\n      }\n\n      red = parseInt(hexMatch[0], 16);\n      green = parseInt(hexMatch[1], 16);\n      blue = parseInt(hexMatch[2], 16);\n\n      return { r: red, g: green, b: blue };\n    }\n\n    var rgbMatch = source.match(/^rgb\\(\\s*(\\d{1,3}%?),\\s*(\\d{1,3}%?),\\s*(\\d{1,3}%?)\\s*\\)$/i);\n    if (rgbMatch) {\n      red = parseComponentValue(rgbMatch[1]);\n      green = parseComponentValue(rgbMatch[2]);\n      blue = parseComponentValue(rgbMatch[3]);\n\n      return { r: red, g: green, b: blue };\n    }\n\n    throw Error('\"' + source + '\" is not a valid color');\n  }\n\n  /**\n   * Creates a {@link ColorSpec} from either a string or an {@link RGB}.\n   *\n   * @private\n   * @param {string|RGB} input\n   * @param {string=} name\n   * @return {ColorSpec}\n   *\n   * @example\n   * createColorSpec('#800'); // => {\n   *   source: '#800',\n   *   rgb: { r: 136, g: 0, b: 0 }\n   * }\n   *\n   * createColorSpec('#800', 'maroon'); // => {\n   *   name: 'maroon',\n   *   source: '#800',\n   *   rgb: { r: 136, g: 0, b: 0 }\n   * }\n   */\n  function createColorSpec(input, name) {\n    var color = {};\n\n    if (name) {\n      color.name = name;\n    }\n\n    if (typeof input === 'string') {\n      color.source = input;\n      color.rgb = parseColor(input);\n\n    } else if (typeof input === 'object') {\n      // This is for if/when we're concatenating lists of colors.\n      if (input.source) {\n        return createColorSpec(input.source, input.name);\n      }\n\n      color.rgb = input;\n      color.source = rgbToHex(input);\n    }\n\n    return color;\n  }\n\n  /**\n   * Parses a value between 0-255 from a string.\n   *\n   * @private\n   * @param {string} string\n   * @return {number}\n   *\n   * @example\n   * parseComponentValue('100');  // => 100\n   * parseComponentValue('100%'); // => 255\n   * parseComponentValue('50%');  // => 128\n   */\n  function parseComponentValue(string) {\n    if (string.charAt(string.length - 1) === '%') {\n      return Math.round(parseInt(string, 10) * 255 / 100);\n    }\n\n    return Number(string);\n  }\n\n  /**\n   * Converts an {@link RGB} color to its hex representation.\n   *\n   * @private\n   * @param {RGB} rgb\n   * @return {string}\n   *\n   * @example\n   * rgbToHex({ r: 255, g: 128, b: 0 }); // => '#ff8000'\n   */\n  function rgbToHex(rgb) {\n    return '#' + leadingZero(rgb.r.toString(16)) +\n      leadingZero(rgb.g.toString(16)) + leadingZero(rgb.b.toString(16));\n  }\n\n  /**\n   * Puts a 0 in front of a numeric string if it's only one digit. Otherwise\n   * nothing (just returns the value passed in).\n   *\n   * @private\n   * @param {string} value\n   * @return\n   *\n   * @example\n   * leadingZero('1');  // => '01'\n   * leadingZero('12'); // => '12'\n   */\n  function leadingZero(value) {\n    if (value.length === 1) {\n      value = '0' + value;\n    }\n    return value;\n  }\n\n  /**\n   * A map from the names of standard CSS colors to their hex values.\n   */\n  nearestColor.STANDARD_COLORS = {\n    aqua: '#0ff',\n    black: '#000',\n    blue: '#00f',\n    fuchsia: '#f0f',\n    gray: '#808080',\n    green: '#008000',\n    lime: '#0f0',\n    maroon: '#800000',\n    navy: '#000080',\n    olive: '#808000',\n    orange: '#ffa500',\n    purple: '#800080',\n    red: '#f00',\n    silver: '#c0c0c0',\n    teal: '#008080',\n    white: '#fff',\n    yellow: '#ff0'\n  };\n\n  /**\n   * Default colors. Comprises the colors of the rainbow (good ol' ROY G. BIV).\n   * This list will be used for calls to {@nearestColor} that don't specify a list\n   * of available colors to match.\n   */\n  nearestColor.DEFAULT_COLORS = mapColors([\n    '#f00', // r\n    '#f80', // o\n    '#ff0', // y\n    '#0f0', // g\n    '#00f', // b\n    '#008', // i\n    '#808'  // v\n  ]);\n\n  nearestColor.VERSION = '0.4.4';\n\n  if (typeof module === 'object' && module && module.exports) {\n    module.exports = nearestColor;\n  } else {\n    context.nearestColor = nearestColor;\n  }\n\n}(this));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack://ColorPicker.Default/./node_modules/nearest-color/nearestColor.js?");

/***/ }),

/***/ "./node_modules/tinycolor2/tinycolor.js":
/*!**********************************************!*\
  !*** ./node_modules/tinycolor2/tinycolor.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;// TinyColor v1.4.1\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {return tinycolor;}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n// Browser: Expose to window\nelse {}\n\n})(Math);\n\n\n//# sourceURL=webpack://ColorPicker.Default/./node_modules/tinycolor2/tinycolor.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack://ColorPicker.Default/(webpack)/buildin/module.js?");

/***/ }),

/***/ "./src/ts/default-picker.ts":
/*!**********************************!*\
  !*** ./src/ts/default-picker.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar colorpicker_1 = __webpack_require__(/*! ./model/colorpicker */ \"./src/ts/model/colorpicker.ts\");\nvar color_1 = __webpack_require__(/*! ./model/color */ \"./src/ts/model/color.ts\");\nvar tsdom_1 = __webpack_require__(/*! ./model/tsdom */ \"./src/ts/model/tsdom.ts\");\nvar nearestColor = __webpack_require__(/*! nearest-color */ \"./node_modules/nearest-color/nearestColor.js\");\nvar DefaultPicker = /** @class */ (function (_super) {\n    __extends(DefaultPicker, _super);\n    function DefaultPicker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DefaultPicker.prototype.buildLayout = function () {\n        var _this = this;\n        if (this.options.hexOnly) {\n            this.options.history.placeholdersAmount = 9;\n            this.options.format = 'hex';\n        }\n        this.picker = tsdom_1.TsDom.create('div')\n            .addClass('colorpicker')\n            .addClass('colorpicker-default')\n            .attr('id', this.id);\n        var body = tsdom_1.TsDom.create('div').addClass('colorpicker-default__body'), footer = tsdom_1.TsDom.create('div').addClass('colorpicker-default__info');\n        if (this.options.hideInfo) {\n            footer.addClass('colorpicker-default__info--hidden');\n        }\n        // build spectrum block\n        this.spectrumContainer = tsdom_1.TsDom.create('div').addClass('colorpicker-default__spectrum-container');\n        this.spectrumCanvas = tsdom_1.TsDom.create('canvas').addClass('colorpicker-default__spectrum-canvas');\n        this.spectrumCursor = tsdom_1.TsDom.create('div').addClass('colorpicker-default__spectrum-cursor');\n        this.spectrumContainer.append(this.spectrumCanvas).append(this.spectrumCursor);\n        // build hue block\n        this.hueContainer = tsdom_1.TsDom.create('div').addClass('colorpicker-default__hue-container');\n        this.hueCanvas = tsdom_1.TsDom.create('canvas').addClass('colorpicker-default__hue-canvas');\n        this.hueCursor = tsdom_1.TsDom.create('div').addClass('colorpicker-default__hue-cursor');\n        this.hueContainer.append(this.hueCanvas).append(this.hueCursor);\n        // build opacity block\n        this.opacityContainer = tsdom_1.TsDom.create('div').addClass('colorpicker-default__opacity-container');\n        this.opacityCanvas = tsdom_1.TsDom.create('canvas').addClass('colorpicker-default__opacity-canvas');\n        this.opacityCursor = tsdom_1.TsDom.create('div').addClass('colorpicker-default__opacity-cursor');\n        // build hex input\n        var hexInputContainer = tsdom_1.TsDom.create('div').addClass('colorpicker-default__hex-input-container'), hexText = tsdom_1.TsDom.create('div')\n            .addClass('colorpicker-default__hex-text')\n            .text('hex');\n        this.hexInput = tsdom_1.TsDom.create('input')\n            .addClass('colorpicker-default__hex-input')\n            .attr('maxlength', 7);\n        hexInputContainer.append(this.hexInput).append(hexText);\n        // build red input\n        var rInputContainer = tsdom_1.TsDom.create('div').addClass('colorpicker-default__r-input-container'), rText = tsdom_1.TsDom.create('div').addClass('colorpicker-default__r-text').text('r');\n        this.rInput = tsdom_1.TsDom.create('input')\n            .addClass('colorpicker-default__r-input')\n            .attr('maxlength', 3);\n        rInputContainer.append(this.rInput).append(rText);\n        // build green input\n        var gInputContainer = tsdom_1.TsDom.create('div').addClass('colorpicker-default__g-input-container'), gText = tsdom_1.TsDom.create('div').addClass('colorpicker-default__g-text').text('g');\n        this.gInput = tsdom_1.TsDom.create('input')\n            .addClass('colorpicker-default__g-input')\n            .attr('maxlength', 3);\n        gInputContainer.append(this.gInput).append(gText);\n        // build blue input\n        var bInputContainer = tsdom_1.TsDom.create('div').addClass('colorpicker-default__b-input-container'), bText = tsdom_1.TsDom.create('div').addClass('colorpicker-default__b-text').text('b');\n        this.bInput = tsdom_1.TsDom.create('input')\n            .addClass('colorpicker-default__b-input')\n            .attr('maxlength', 3);\n        bInputContainer.append(this.bInput).append(bText);\n        // build opacity input\n        var aInputContainer = tsdom_1.TsDom.create('div').addClass('colorpicker-default__a-input-container');\n        this.aInput = tsdom_1.TsDom.create('input')\n            .addClass('colorpicker-default__a-input')\n            .attr('maxlength', 4);\n        var aText = tsdom_1.TsDom.create('div').addClass('colorpicker-default__a-text').text('a');\n        aInputContainer.append(this.aInput).append(aText);\n        this.history = tsdom_1.TsDom.create('div').addClass('colorpicker-default__history');\n        if (this.options.history.hidden) {\n            this.history.addClass('is-hidden');\n        }\n        var addHistoryItem = tsdom_1.TsDom.create('div')\n            .addClass('colorpicker-default__history-item')\n            .addClass('is-add-new');\n        this.history.append(addHistoryItem);\n        this.options.history.colors.forEach(function (color) {\n            var historyItem = tsdom_1.TsDom.create('div')\n                .addClass('colorpicker-default__history-item')\n                .addClass('has-color')\n                .css('background', color)\n                .attr('data-history-color', (new color_1.Color(color).rgba));\n            _this.history.append(historyItem);\n        });\n        for (var i = 0; i < this.options.history.placeholdersAmount - this.options.history.colors.length; i++) {\n            var emptyHistoryItem = tsdom_1.TsDom.create('div')\n                .addClass('colorpicker-default__history-item')\n                .addClass('is-empty')\n                .attr('data-history-color', '');\n            this.history.append(emptyHistoryItem);\n        }\n        this.opacityContainer\n            .append(this.opacityCanvas)\n            .append(this.opacityCursor);\n        body.append(this.spectrumContainer)\n            .append(this.hueContainer)\n            .append(this.opacityContainer);\n        footer\n            .append(hexInputContainer)\n            .append(rInputContainer)\n            .append(gInputContainer)\n            .append(bInputContainer)\n            .append(aInputContainer);\n        this.picker.append(body).append(footer).append(this.history);\n    };\n    DefaultPicker.prototype.bindEvents = function () {\n        var _this = this;\n        var self = this;\n        this.spectrumCursor\n            .on('dragstart', function (e) {\n            e.stopPropagation();\n            e.preventDefault();\n        });\n        this.spectrumContainer\n            .on('mousedown', function (e) {\n            if (e.which != 1) {\n                return;\n            }\n            _this.initDragObject(e, self.spectrumCursor, self.spectrumCanvas);\n            _this.processCursorPosition(_this.spectrumCursor, _this.spectrumCanvas, _this.dragObject.shiftX, _this.dragObject.shiftY);\n            _this.spectrumColor = _this.setCursorColorFromCursorPosition(_this.spectrumCursor, _this.spectrumCanvas, _this.dragObject.shiftX, _this.dragObject.shiftY);\n            _this.setOpacityGradientAndCursorColor();\n            _this.setColorValuesToInputs();\n            _this.dispatchColorChangedEvent();\n        });\n        this.hueContainer\n            .on('mousedown', function (e) {\n            if (e.which != 1) {\n                return;\n            }\n            _this.initDragObject(e, _this.hueCursor, _this.hueCanvas);\n            _this.dragObject.processShiftX = false;\n            _this.processCursorPosition(self.hueCursor, self.hueCanvas, self.dragObject.shiftX, self.dragObject.shiftY, self.dragObject.processShiftX);\n            _this.hueColor = _this.setCursorColorFromCursorPosition(self.hueCursor, self.hueCanvas, self.dragObject.shiftX, self.dragObject.shiftY);\n            _this.fillSpectrumCanvas();\n            var cursorCoords = _this.getCursorCoords(_this.spectrumCursor);\n            _this.spectrumColor = _this.setCursorColorFromCursorPosition(self.spectrumCursor, self.spectrumCanvas, cursorCoords.shiftX, cursorCoords.shiftY);\n            _this.fillOpacityCanvas();\n            _this.setOpacityGradientAndCursorColor();\n            _this.setColorValuesToInputs();\n            _this.dispatchColorChangedEvent();\n        });\n        this.opacityContainer\n            .on('mousedown', function (e) {\n            if (e.which != 1) {\n                return;\n            }\n            _this.initDragObject(e, _this.opacityCursor, _this.opacityCanvas);\n            _this.dragObject.processShiftX = false;\n            _this.processCursorPosition(self.opacityCursor, self.opacityCanvas, self.dragObject.shiftX, self.dragObject.shiftY, self.dragObject.processShiftX);\n            _this.changeAInputValue(self.dragObject.shiftY);\n            _this.setCursorColorFromCursorPosition(self.opacityCursor, self.opacityCanvas, self.dragObject.shiftX, self.dragObject.shiftY, +_this.aInput.val());\n            _this.dispatchColorChangedEvent();\n        });\n        this.hexInput\n            .on('keyup', function (e) {\n            var value = _this.hexInput.val();\n            var isValid = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(value);\n            if (isValid) {\n                _this.spectrumColor = color_1.Color.process(value);\n                _this.setHueCursorPosition();\n                _this.fillSpectrumCanvas();\n                _this.fillOpacityCanvas();\n                _this.setSpectrumCursorPositionByColor(_this.spectrumColor);\n                _this.setOpacityGradientAndCursorColor();\n                _this.rInput.val(_this.spectrumColor.source.rgba.r);\n                _this.gInput.val(_this.spectrumColor.source.rgba.g);\n                _this.bInput.val(_this.spectrumColor.source.rgba.b);\n                _this.dispatchColorChangedEvent();\n            }\n        });\n        this.rInput\n            .on('keyup', function (e) {\n            _this.onChangeInputValue(_this.rInput);\n        });\n        this.gInput\n            .on('keyup', function (e) {\n            _this.onChangeInputValue(_this.gInput);\n        });\n        this.bInput\n            .on('keyup', function (e) {\n            _this.onChangeInputValue(_this.bInput);\n        });\n        this.aInput.on('keyup', function (e) {\n            var opacity = _this.aInput.val();\n            var isValid = opacity.match(/^\\d*(\\.\\d+)?$/);\n            if (isValid && (opacity >= 0 && opacity <= 1)) {\n                _this.setOpacityCursorPosition(opacity);\n                _this.dispatchColorChangedEvent();\n            }\n        });\n        tsdom_1.TsDom.select(document)\n            .on('mousemove', function (e) {\n            if (!_this.dragObject) {\n                return;\n            }\n            var shiftX = _this.dragObject.shiftX;\n            var shiftY = _this.dragObject.shiftY;\n            if (_this.dragObject.processShiftX) {\n                var moveX = e.clientX - _this.dragObject.downX;\n                shiftX = moveX + _this.dragObject.shiftX;\n            }\n            if (_this.dragObject.processShiftY) {\n                var moveY = e.clientY - _this.dragObject.downY;\n                shiftY = moveY + _this.dragObject.shiftY;\n            }\n            _this.processCursorPosition(_this.dragObject.elements.cursor, _this.dragObject.elements.canvas, shiftX, shiftY, _this.dragObject.processShiftX, _this.dragObject.processShiftY);\n            // If drag main cursor\n            if (_this.dragObject.elements.cursor.hasClass('colorpicker-default__spectrum-cursor')) {\n                _this.spectrumColor = _this.setCursorColorFromCursorPosition(_this.spectrumCursor, _this.spectrumCanvas, shiftX, shiftY);\n                _this.setOpacityGradientAndCursorColor();\n                _this.setColorValuesToInputs();\n                _this.dispatchColorChangedEvent();\n            }\n            else if (_this.dragObject.elements.cursor.hasClass('colorpicker-default__hue-cursor')) {\n                _this.hueColor = _this.setCursorColorFromCursorPosition(self.hueCursor, self.hueCanvas, shiftX, shiftY);\n                _this.fillSpectrumCanvas();\n                var cursorCoords = _this.getCursorCoords(_this.spectrumCursor);\n                _this.spectrumColor = _this.setCursorColorFromCursorPosition(self.spectrumCursor, self.spectrumCanvas, cursorCoords.shiftX, cursorCoords.shiftY);\n                _this.fillOpacityCanvas();\n                _this.setOpacityGradientAndCursorColor();\n                _this.setColorValuesToInputs();\n                _this.dispatchColorChangedEvent();\n            }\n            else if (_this.dragObject.elements.cursor.hasClass('colorpicker-default__opacity-cursor')) {\n                _this.changeAInputValue(shiftY);\n                _this.setCursorColorFromCursorPosition(self.opacityCursor, self.opacityCanvas, shiftX, shiftY, +_this.aInput.val());\n                _this.dispatchColorChangedEvent();\n            }\n        })\n            .on('mouseup', function (e) {\n            _this.dragObject = null;\n        });\n        this.history.find('.is-add-new').on('click', function (e) {\n            var currentColor = _this.getColorObject().rgba;\n            var isAdded = false;\n            if (_this.history.find('.is-empty').length()) {\n                _this.history\n                    .find('.is-empty')\n                    .each(function (item) {\n                    var element = tsdom_1.TsDom.select(item);\n                    var isColorAlreadyAdded = _this.history.find('[data-history-color=\"' + currentColor + '\"]').length();\n                    if (isColorAlreadyAdded) {\n                        isAdded = true;\n                    }\n                    if (!element.data('history-color') && !isAdded) {\n                        isAdded = true;\n                        element\n                            .css('background', currentColor)\n                            .attr('data-history-color', currentColor)\n                            .removeClass('is-empty')\n                            .addClass('has-color');\n                    }\n                });\n            }\n            else {\n                var isColorAlreadyAdded = _this.history.find('[data-history-color=\"' + currentColor + '\"]').length();\n                if (!isColorAlreadyAdded) {\n                    var newHistoryItem = tsdom_1.TsDom.create('div')\n                        .addClass('colorpicker-default__history-item')\n                        .addClass('has-color')\n                        .css('background', currentColor)\n                        .attr('data-history-color', currentColor);\n                    _this.history.append(newHistoryItem);\n                }\n            }\n        });\n        this.history.on('click', function (e) {\n            var item = tsdom_1.TsDom.select(e.target);\n            if (item.hasClass('has-color')) {\n                var color = item.data('history-color');\n                _this.setColor(color);\n                _this.dispatchColorChangedEvent();\n            }\n        });\n        this.picker\n            .on('contextmenu', function (e) {\n            e.stopPropagation();\n            e.preventDefault();\n            return false;\n        });\n    };\n    DefaultPicker.prototype.refresh = function () {\n    };\n    DefaultPicker.prototype.destroy = function () {\n        this.unBindCommonEvents();\n        this.picker.remove();\n        this.anchor.off('focus');\n        this.anchor.off('click');\n    };\n    /**\n     * Change r,g,b input\n     * @param {TsDom} input\n     */\n    DefaultPicker.prototype.onChangeInputValue = function (input) {\n        var value = +input.val();\n        if (value >= 0 && value <= 255) {\n            this.spectrumColor = color_1.Color.process(this.getColorFromInputs());\n            this.setHueCursorPosition();\n            this.fillSpectrumCanvas();\n            this.fillOpacityCanvas();\n            this.spectrumColor = this.setSpectrumCursorPositionByColor(this.spectrumColor);\n            this.hexInput.val(this.spectrumColor.hex);\n            this.setOpacityGradientAndCursorColor();\n            this.dispatchColorChangedEvent();\n        }\n    };\n    DefaultPicker.prototype.getColorFromInputs = function () {\n        return 'rgba(' + this.rInput.val() + ', ' + this.gInput.val() + ', ' + this.bInput.val() + ', ' + this.aInput.val() + ')';\n    };\n    DefaultPicker.prototype.getCursorCoords = function (cursor) {\n        return {\n            shiftX: cursor.offset().left + Math.floor(cursor.width() / 2),\n            shiftY: cursor.offset().top + Math.floor(cursor.height() / 2)\n        };\n    };\n    DefaultPicker.prototype.setOpacityGradientAndCursorColor = function () {\n        var opacity = +this.aInput.val();\n        var shiftY = +(this.opacityCanvas.height() * opacity).toFixed(0) - (this.opacityCursor.height() / 2);\n        var shiftX = (this.opacityCanvas.width() / 2) - (this.opacityCursor.width() / 2);\n        this.fillOpacityCanvas();\n        this.setCursorColorFromCursorPosition(this.opacityCursor, this.opacityCanvas, shiftX, shiftY, opacity);\n    };\n    DefaultPicker.prototype.initDragObject = function (e, cursor, canvas) {\n        e.stopPropagation();\n        e.preventDefault();\n        if (e.which != 1) {\n            return;\n        }\n        var shiftX = e.clientX - canvas.position().left - Math.floor(cursor.width() / 2), shiftY = e.clientY - canvas.position().top - Math.floor(cursor.height() / 2);\n        this.dragObject = {\n            elements: {\n                cursor: cursor,\n                canvas: canvas\n            },\n            downX: e.clientX,\n            downY: e.clientY,\n            shiftX: shiftX,\n            shiftY: shiftY,\n            processShiftX: true,\n            processShiftY: true\n        };\n    };\n    DefaultPicker.prototype.update = function () {\n        if (this.options.hexOnly) {\n            this.picker.addClass('colorpicker-default--hex-only');\n        }\n        if (!this.options.color) {\n            this.options.color = this.options.defaultColor;\n        }\n        if (color_1.Color.process(this.options.color).isValid()) {\n            this.processUpdate();\n        }\n    };\n    DefaultPicker.prototype.processUpdate = function () {\n        this.spectrumColor = color_1.Color.process(this.options.color);\n        this.currentColor = color_1.Color.process(this.options.color);\n        this.aInput.val(this.spectrumColor.source.rgba.a);\n        this.setColorValuesToInputs();\n        // important, with and height from css properties don't match\n        // you need to set width and height manually to attributes\n        this.spectrumCanvas\n            .attr('width', this.spectrumCanvas.width())\n            .attr('height', this.spectrumCanvas.height());\n        this.spectrumCanvas.get().getContext('2d').clearRect(0, 0, this.spectrumCanvas.width(), this.spectrumCanvas.height());\n        this.hueCanvas\n            .attr('width', this.hueCanvas.width())\n            .attr('height', this.hueCanvas.height());\n        this.opacityCanvas\n            .attr('width', this.opacityCanvas.width())\n            .attr('height', this.opacityCanvas.height());\n        this.fillHueCanvas();\n        this.setHueCursorPosition();\n        this.fillSpectrumCanvas();\n        this.fillOpacityCanvas();\n        this.setSpectrumCursorPositionByColor(this.spectrumColor);\n        this.setOpacityCursorPosition(this.spectrumColor.source.rgba.a);\n    };\n    DefaultPicker.prototype.getColor = function () {\n        var color = this.spectrumColor ? color_1.Color.process(this.getColorFromInputs()) : color_1.Color.process(this.options.color);\n        if (this.aInput.val()) {\n            color.setOpacity(this.aInput.val());\n        }\n        return color.format(this.options.format);\n    };\n    DefaultPicker.prototype.getColorObject = function () {\n        return this.spectrumColor ? color_1.Color.process(this.getColorFromInputs()) : color_1.Color.process(this.options.color);\n    };\n    DefaultPicker.prototype.setSpectrumCursorPositionByColor = function (color) {\n        var canvasWidth = this.spectrumCanvas.width();\n        var canvasHeight = this.spectrumCanvas.height();\n        var hsvColors = color.format('source').hsv;\n        var shiftX = Math.floor((canvasWidth / 100) * hsvColors.s);\n        var shiftY = canvasHeight - Math.floor((canvasHeight / 100) * hsvColors.v);\n        shiftX = shiftX - this.spectrumCursor.width() / 2;\n        shiftY = shiftY - this.spectrumCursor.height() / 2;\n        this.processCursorPosition(this.spectrumCursor, this.spectrumCanvas, shiftX, shiftY);\n        return this.setCursorColorFromCursorPosition(this.spectrumCursor, this.spectrumCanvas, shiftX, shiftY);\n    };\n    DefaultPicker.prototype.setHueCursorPosition = function () {\n        var hueCanvas = this.picker.find('.colorpicker-default__hue-canvas');\n        var canvasHeight = hueCanvas.height();\n        var canvasContext = hueCanvas.get().getContext('2d');\n        var colors = [];\n        var heightOffsets = {};\n        for (var i = 0; i < canvasHeight; i++) {\n            var colorData = canvasContext.getImageData(0, i, 1, 1).data;\n            var hexColor = color_1.Color.process(\"rgb(\" + colorData[0] + \", \" + colorData[1] + \", \" + colorData[2] + \")\").format('hex');\n            colors.push(hexColor);\n            heightOffsets[hexColor] = i;\n        }\n        this.options.hueColors.forEach(function (hueColor) {\n            colors.push(hueColor.color);\n            heightOffsets[hueColor.color] = Math.ceil((canvasHeight / 100) * (hueColor.offset * 100));\n        });\n        var nearestColorInstance = nearestColor.from(colors);\n        var nearestColorValue = nearestColorInstance(this.currentColor.hex);\n        this.hueColor = color_1.Color.process(nearestColorValue);\n        var shiftY = heightOffsets[nearestColorValue];\n        var hueCursor = this.picker.find('.colorpicker-default__hue-cursor');\n        var shiftX = Math.ceil(hueCanvas.width() / 2) - Math.ceil(hueCursor.width() / 2);\n        this.processCursorPosition(hueCursor, hueCanvas, shiftX, shiftY);\n        return this.setCursorColorFromCursorPosition(hueCursor, hueCanvas, shiftX, shiftY);\n    };\n    DefaultPicker.prototype.setOpacityCursorPosition = function (opacity) {\n        var shiftY = +(this.opacityCanvas.height() * opacity).toFixed(0);\n        shiftY = shiftY - (this.opacityCursor.height() / 2);\n        var shiftX = Math.ceil(this.opacityCanvas.width() / 2) - Math.ceil(this.opacityCursor.width() / 2);\n        this.processCursorPosition(this.opacityCursor, this.opacityCanvas, shiftX, shiftY);\n        return this.setCursorColorFromCursorPosition(this.opacityCursor, this.opacityCanvas, shiftX, shiftY, +this.aInput.val());\n    };\n    DefaultPicker.prototype.fillSpectrumCanvas = function () {\n        var canvasWidth = this.spectrumCanvas.width();\n        var canvasHeight = this.spectrumCanvas.height();\n        var canvasContext = this.spectrumCanvas.get().getContext('2d');\n        canvasContext.clearRect(0, 0, canvasWidth, canvasHeight);\n        var whiteGradient = canvasContext.createLinearGradient(0, 0, canvasWidth, 0);\n        whiteGradient.addColorStop(0, \"#fff\");\n        whiteGradient.addColorStop(.01, \"#fff\");\n        whiteGradient.addColorStop(.99, this.hueColor.rgb);\n        whiteGradient.addColorStop(1, this.hueColor.rgb);\n        canvasContext.fillStyle = whiteGradient;\n        canvasContext.fillRect(0, 0, canvasWidth, canvasHeight);\n        var blackGradient = canvasContext.createLinearGradient(0, 0, 0, canvasHeight);\n        blackGradient.addColorStop(.01, \"transparent\");\n        blackGradient.addColorStop(.99, \"#000\");\n        blackGradient.addColorStop(1, \"#000\");\n        canvasContext.fillStyle = blackGradient;\n        canvasContext.fillRect(0, 0, canvasWidth, canvasHeight);\n    };\n    DefaultPicker.prototype.fillHueCanvas = function () {\n        var canvasContext = this.hueCanvas.get().getContext('2d'), multipleGradient = canvasContext.createLinearGradient(0, 0, 0, this.hueCanvas.height());\n        this.options.hueColors.forEach(function (node) {\n            multipleGradient.addColorStop(node.offset, node.color);\n        });\n        canvasContext.fillStyle = multipleGradient;\n        canvasContext.fillRect(0, 0, this.hueCanvas.width(), this.hueCanvas.height());\n    };\n    DefaultPicker.prototype.fillOpacityCanvas = function () {\n        var canvasContext = this.opacityCanvas.get().getContext('2d');\n        canvasContext.clearRect(0, 0, this.opacityCanvas.width(), this.opacityCanvas.height());\n        var opacityGradient = canvasContext.createLinearGradient(0, 0, 0, this.opacityCanvas.height());\n        opacityGradient.addColorStop(0, \"transparent\");\n        opacityGradient.addColorStop(1, this.spectrumColor.rgb);\n        canvasContext.fillStyle = opacityGradient;\n        canvasContext.fillRect(0, 0, this.opacityCanvas.width(), this.opacityCanvas.height());\n    };\n    DefaultPicker.prototype.setCursorColorFromCursorPosition = function (cursor, canvas, shiftX, shiftY, opacity) {\n        if (opacity === void 0) { opacity = 1; }\n        var canvasContext = canvas.get().getContext('2d'), cursorOffsetLeft = Math.ceil(cursor.width() / 2) + shiftX, cursorOffsetTop = Math.ceil(cursor.height() / 2) + shiftY;\n        if (cursorOffsetLeft <= 0 || (shiftX === 0)) {\n            cursorOffsetLeft = 0;\n        }\n        if (cursorOffsetTop <= 0 || (shiftY === 0)) {\n            cursorOffsetTop = 0;\n        }\n        if (cursorOffsetLeft >= canvas.width()) {\n            cursorOffsetLeft = canvas.width() - 1;\n        }\n        if (cursorOffsetTop >= canvas.height()) {\n            cursorOffsetTop = canvas.height() - 1;\n        }\n        var colorData = canvasContext.getImageData(cursorOffsetLeft, cursorOffsetTop, 1, 1).data;\n        var tmpColor = 'rgba(' + colorData[0] + ', ' + colorData[1] + ', ' + colorData[2] + ', ' + opacity + ')';\n        var color = color_1.Color.process(tmpColor);\n        cursor.css('background-color', color.rgba);\n        return color;\n    };\n    DefaultPicker.prototype.dispatchColorChangedEvent = function () {\n        tsdom_1.TsDom.select(this.cssId).trigger('colorpicker:color-change', {\n            color: this.getColor().toString()\n        });\n    };\n    DefaultPicker.prototype.processCursorPosition = function (cursor, canvas, shiftX, shiftY, processShiftX, processShiftY) {\n        if (processShiftX === void 0) { processShiftX = true; }\n        if (processShiftY === void 0) { processShiftY = true; }\n        if (processShiftX) {\n            var divX = cursor.width() / 2;\n            if ((shiftX + divX) < 0) {\n                if (shiftX <= -divX) {\n                    shiftX = -divX;\n                }\n            }\n            if (shiftX > (canvas.width() - divX)) {\n                shiftX = canvas.width() - divX;\n            }\n        }\n        else {\n            shiftX = Math.ceil(canvas.width() / 2) - Math.ceil(cursor.width() / 2);\n        }\n        if (processShiftY) {\n            var divY = cursor.height() / 2;\n            if ((shiftY + divY) < 0) {\n                if (shiftY <= -divY) {\n                    shiftY = -divY;\n                }\n            }\n            if (shiftY > (canvas.height() - divY)) {\n                shiftY = canvas.height() - divY;\n            }\n        }\n        else {\n            shiftY = Math.ceil(canvas.height() / 2) - Math.ceil(cursor.height() / 2);\n        }\n        cursor.css('left', shiftX + 'px');\n        cursor.css('top', shiftY + 'px');\n    };\n    DefaultPicker.prototype.changeAInputValue = function (shiftY) {\n        var opacity = +((shiftY / this.opacityCanvas.height()).toFixed(2));\n        if (opacity <= 0) {\n            opacity = 0;\n        }\n        else if (opacity >= 1) {\n            opacity = 1;\n        }\n        this.aInput.val(opacity);\n    };\n    DefaultPicker.prototype.setColorValuesToInputs = function () {\n        var color = this.spectrumColor, hexColor = color.hex, rgbaColor = color.source.rgba;\n        this.hexInput.val(hexColor);\n        this.rInput.val(rgbaColor.r);\n        this.gInput.val(rgbaColor.g);\n        this.bInput.val(rgbaColor.b);\n    };\n    DefaultPicker.prototype.getPickerCssClassName = function () {\n        return 'colorpicker-default';\n    };\n    DefaultPicker.prototype.getDefaultOptions = function () {\n        return {\n            defaultColor: '#f00',\n            hueColors: [\n                { offset: 0, color: '#ff0000' },\n                { offset: .17, color: '#ff00ff' },\n                { offset: .33, color: '#0000ff' },\n                { offset: .5, color: '#00ffff' },\n                { offset: .67, color: '#00ff00' },\n                { offset: .83, color: '#ffff00' },\n                { offset: 1, color: '#ff0000' }\n            ]\n        };\n    };\n    return DefaultPicker;\n}(colorpicker_1.ColorPicker));\nmodule.exports = DefaultPicker;\n\n\n//# sourceURL=webpack://ColorPicker.Default/./src/ts/default-picker.ts?");

/***/ }),

/***/ "./src/ts/model/color.ts":
/*!*******************************!*\
  !*** ./src/ts/model/color.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tinycolor = __webpack_require__(/*! tinycolor2 */ \"./node_modules/tinycolor2/tinycolor.js\");\nvar Color = /** @class */ (function () {\n    function Color(color) {\n        this.color = color;\n        this.normalize();\n    }\n    Color.prototype.normalize = function () {\n        var color = tinycolor(this.color);\n        var opacity = color.getAlpha();\n        var rawRgb = color.toRgb();\n        var rawHsl = color.toHsl();\n        var rawHsv = color.toHsv();\n        color.setAlpha(1);\n        this.rgb = color.toRgbString();\n        this.rgba = \"rgba(\" + rawRgb.r + \", \" + rawRgb.g + \", \" + rawRgb.b + \", \" + opacity + \")\";\n        this.hex = color.toHexString();\n        this.hsl = color.toHslString();\n        this.hsla = \"hsla(\" + Math.floor(rawHsl.h) + \", \" + Math.floor(rawHsl.s * 100) + \"%, \" + Math.floor(rawHsl.l * 100) + \"%, \" + opacity + \")\";\n        this.hsv = color.toHsvString();\n        this.hsva = '';\n        this.source = {\n            rgba: {\n                r: rawRgb.r,\n                g: rawRgb.g,\n                b: rawRgb.b,\n                a: opacity,\n            },\n            hsla: {\n                h: Math.floor(rawHsl.h),\n                s: Math.floor(rawHsl.s * 100),\n                l: Math.floor(rawHsl.l * 100),\n                a: opacity\n            },\n            hsv: {\n                h: Math.floor(rawHsv.h),\n                s: Math.floor(rawHsv.s * 100),\n                v: Math.floor(rawHsv.v * 100),\n                a: opacity\n            }\n        };\n        /*console.log(this.rgb);\n        console.log(this.rgba);\n        console.log(this.hex);\n        console.log(this.hsl);\n        console.log(this.hsla);\n        console.log(this.hsv);\n        console.log(this.source);*/\n    };\n    Color.prototype.format = function (format) {\n        if (format === 'rgb') {\n            return this.rgb;\n        }\n        else if (format === 'rgba') {\n            return this.rgba;\n        }\n        else if (format === 'hex') {\n            return this.hex;\n        }\n        else if (format === 'hsl') {\n            return this.hsl;\n        }\n        else if (format === 'hsla') {\n            return this.hsla;\n        }\n        else if (format === 'source') {\n            return this.source;\n        }\n        return this.hex;\n    };\n    Color.prototype.setOpacity = function (opacity) {\n        this.rgba = 'rgba(' + this.source.rgba.r + ', ' + this.source.rgba.g + ', ' + this.source.rgba.b + ', ' + opacity + ')';\n        this.hsla = 'hsla(' + this.source.hsla.h + ', ' + this.source.hsla.s + '%, ' + this.source.hsla.l + '%, ' + opacity + ')';\n        this.source.rgba.a = opacity;\n        this.source.hsla.a = opacity;\n    };\n    Color.prototype.isValid = function () {\n        return tinycolor(this.color).isValid();\n    };\n    Color.process = function (color) {\n        return new Color(color);\n    };\n    return Color;\n}());\nexports.Color = Color;\n\n\n//# sourceURL=webpack://ColorPicker.Default/./src/ts/model/color.ts?");

/***/ }),

/***/ "./src/ts/model/colorpicker.ts":
/*!*************************************!*\
  !*** ./src/ts/model/colorpicker.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tsdom_1 = __webpack_require__(/*! ./tsdom */ \"./src/ts/model/tsdom.ts\");\nvar deepmerge = __webpack_require__(/*! deepmerge */ \"./node_modules/deepmerge/dist/umd.js\");\nvar helper_1 = __webpack_require__(/*! ./helper */ \"./src/ts/model/helper.ts\");\nvar picker_position_1 = __webpack_require__(/*! ./picker-position */ \"./src/ts/model/picker-position.ts\");\nvar ColorPicker = /** @class */ (function () {\n    function ColorPicker(anchor, options) {\n        if (options === void 0) { options = {}; }\n        this.options = {\n            color: '',\n            hexOnly: false,\n            inline: false,\n            placement: 'bottom',\n            format: 'rgba',\n            customClass: '',\n            size: 'default',\n            arrow: true,\n            anchor: {\n                hidden: false,\n                cssProperty: 'color' // background-color, color\n            },\n            animation: 'slide-in',\n            hideInfo: false,\n            history: {\n                hidden: false,\n                placeholdersAmount: 10,\n                colors: []\n            }\n        };\n        this.events = {\n            change: function (color) { }\n        };\n        var overwriteMerge = function (destinationArray, sourceArray, options) { return sourceArray; };\n        this.anchor = tsdom_1.TsDom.select(anchor);\n        this.id = 'colorpicker' + '-' + helper_1._uniqueId();\n        this.anchorId = this.id + '-anchor';\n        this.cssId = '#' + this.id;\n        this.cssAnchorId = '#' + this.anchorId;\n        this.options = deepmerge.all([this.options, this.getDefaultOptions(), ColorPicker.globalOptions, options], {\n            arrayMerge: overwriteMerge\n        });\n        this.document = tsdom_1.TsDom.select(document);\n        this.initPicker();\n        this.update();\n        this.initAnchor();\n    }\n    ColorPicker.prototype.setColor = function (color) {\n        this.options.color = color;\n        this.update();\n    };\n    ColorPicker.prototype.show = function () {\n        this.bindCommonEvents();\n        this.picker\n            .removeClass(this.options.animation)\n            .addClass(this.options.animation)\n            .addClass('is-opened')\n            .addClass('colorpicker--position-' + this.options.placement);\n        this.detectPickerPosition();\n        this.afterShow();\n    };\n    ColorPicker.prototype.hide = function () {\n        if (!this.picker.hasClass('is-opened')) {\n            return;\n        }\n        this.pickerPosition.destroy();\n        this.unBindCommonEvents();\n        this.picker.removeClass('is-opened');\n        this.anchor.get(0).blur(); // unfocus input\n    };\n    ColorPicker.prototype.unBindCommonEvents = function () {\n        if (!this.options.inline) {\n            this.document.off('mousedown');\n        }\n    };\n    ColorPicker.prototype.on = function (eventName, eventCallback) {\n        this.events[eventName] = eventCallback;\n    };\n    ColorPicker.prototype.setAnchorCssProperty = function (cssProperty) {\n        this.options.anchor.cssProperty = cssProperty;\n    };\n    ColorPicker.prototype.setPlacement = function (placement) {\n        this.options.placement = placement;\n    };\n    ColorPicker.setGlobalOptions = function (options) {\n        ColorPicker.globalOptions = options;\n    };\n    ColorPicker.prototype.initPicker = function () {\n        this.buildLayout();\n        this.picker.addClass(this.getPickerCssClassName() + '--size-' + this.options.size);\n        // hide arrow on picker\n        if (!this.options.arrow) {\n            this.picker.addClass('colorpicker--no-arrow');\n        }\n        this.addCustomClass();\n        if (this.options.inline) {\n            if (this.anchor.parent().hasClass('colorpicker-input')) {\n                this.anchor.parent().insertAfter(this.picker);\n            }\n            else {\n                this.anchor.insertAfter(this.picker);\n            }\n            this.anchor.addClass('colorpicker-anchor--inline');\n            this.picker.addClass('colorpicker--inline');\n        }\n        else {\n            tsdom_1.TsDom.select('body').append(this.picker);\n        }\n        this.bindEvents();\n    };\n    ColorPicker.prototype.bindCommonEvents = function () {\n        var _this = this;\n        if (!this.options.inline) {\n            this.document.on('mousedown', function (e) {\n                var picker = tsdom_1.TsDom.select(e.target).closest('.colorpicker');\n                if ((!picker.length() || picker.attr('id') !== _this.picker.attr('id')) && (e.target !== _this.anchor.get(0))) {\n                    _this.hide();\n                }\n            });\n        }\n    };\n    ColorPicker.prototype.initAnchor = function () {\n        var _this = this;\n        var self = this;\n        var callback = function (e) {\n            self.hideAllActivePickers();\n            self.show();\n            e.stopPropagation();\n        };\n        this.anchor.addClass('colorpicker-anchor');\n        if (this.options.anchor.hidden) {\n            this.anchor.hide();\n        }\n        if (this.anchor.is('input')) {\n            this.anchor\n                .val(self.getColor().toString())\n                .on('input', function (e) {\n                _this.setColor(_this.anchor.val());\n                _this.updateAnchorColor(e, false);\n            });\n            var anchorInInput = this.anchor.parent().find('[data-color]');\n            if (anchorInInput.length()) {\n                anchorInInput.css('background', self.getColor());\n            }\n            if (!this.options.inline) {\n                this.anchor.on('focus', callback);\n            }\n        }\n        else {\n            if (this.anchor.find('[data-color]').length()) {\n                this.anchor\n                    .find('[data-color]')\n                    .css('background', self.getColor());\n            }\n            else {\n                this.anchor.css(self.options.anchor.cssProperty, self.getColor());\n            }\n            if (!this.options.inline) {\n                this.anchor.on('click', callback);\n            }\n        }\n        this.picker.on('colorpicker:color-change', function (e) {\n            _this.updateAnchorColor(e);\n        });\n        this.picker.on('colorpicker:hide', function (e) {\n            _this.hide();\n        });\n    };\n    ColorPicker.prototype.updateAnchorColor = function (e, updateValue) {\n        if (e === void 0) { e = null; }\n        if (updateValue === void 0) { updateValue = true; }\n        var self = this;\n        if (e.detail.enableHidePicker && self.options.hideAfterColorChange && !this.options.inline) {\n            self.hide();\n        }\n        var dataColor = null;\n        if (updateValue) {\n            this.anchor.val(self.getColor().toString());\n        }\n        if (this.anchor.parent().hasClass('colorpicker-input')) {\n            dataColor = this.anchor.parent().find('[data-color]');\n        }\n        else {\n            dataColor = this.anchor.find('[data-color]');\n        }\n        if (dataColor.length()) {\n            dataColor.css('background-color', self.getColor());\n        }\n        else {\n            if (!this.anchor.is('input')) {\n                this.anchor.css(self.options.anchor.cssProperty, self.getColor());\n            }\n        }\n        this.events['change'].apply(self, [self.getColorObject()]);\n    };\n    ColorPicker.prototype.hideAllActivePickers = function () {\n        tsdom_1.TsDom\n            .select(\".colorpicker.is-opened:not(\" + this.cssId + \"):not(.colorpicker--inline)\")\n            .trigger('colorpicker:hide');\n    };\n    ColorPicker.prototype.addCustomClass = function () {\n        this.picker.addClass(this.options.customClass);\n    };\n    ColorPicker.prototype.detectPickerPosition = function () {\n        var _this = this;\n        this.pickerPosition = new picker_position_1.PickerPosition(this.anchor, this.picker, this.options.placement, this.options.arrow);\n        this.pickerPosition.process();\n        this.picker.on('colorpicker:refresh-position', function (e) {\n            _this.pickerPosition.process();\n        });\n    };\n    ColorPicker.prototype.dispatchColorChangedEvent = function (enableHidePicker) {\n        if (enableHidePicker === void 0) { enableHidePicker = true; }\n        this.picker.trigger('colorpicker:color-change', {\n            color: this.getColor(),\n            enableHidePicker: enableHidePicker\n        });\n    };\n    ColorPicker.prototype.dispatchRefreshPositionEvent = function () {\n        this.picker.trigger('colorpicker:refresh-position');\n    };\n    ColorPicker.prototype.afterShow = function () { };\n    ;\n    ColorPicker.globalOptions = {};\n    return ColorPicker;\n}());\nexports.ColorPicker = ColorPicker;\n\n\n//# sourceURL=webpack://ColorPicker.Default/./src/ts/model/colorpicker.ts?");

/***/ }),

/***/ "./src/ts/model/helper.ts":
/*!********************************!*\
  !*** ./src/ts/model/helper.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction _uniqueId(idLength) {\n    if (idLength === void 0) { idLength = 16; }\n    return Math.random().toString(36).substr(2, idLength);\n}\nexports._uniqueId = _uniqueId;\n\n\n//# sourceURL=webpack://ColorPicker.Default/./src/ts/model/helper.ts?");

/***/ }),

/***/ "./src/ts/model/picker-position.ts":
/*!*****************************************!*\
  !*** ./src/ts/model/picker-position.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tsdom_1 = __webpack_require__(/*! ./tsdom */ \"./src/ts/model/tsdom.ts\");\nvar PickerPosition = /** @class */ (function () {\n    function PickerPosition(selector, picker, defaultPlacement, arrow) {\n        this.selector = selector;\n        this.picker = picker;\n        this.defaultPlacement = defaultPlacement;\n        this.arrow = arrow;\n        var self = this;\n        var scrollParent = this.getScrollParent(this.selector.get());\n        this.processHandler = function (e) { return self.process(); };\n        this.scrollParent = tsdom_1.TsDom.select(scrollParent);\n        this.scrollParent.on('scroll', this.processHandler);\n        this.window = tsdom_1.TsDom.select(window);\n        this.window.on('scroll', this.processHandler);\n    }\n    PickerPosition.prototype.process = function () {\n        var pickerId = this.picker.attr('id'), arrow = tsdom_1.TsDom.select('#' + pickerId + ':after'), arrowWidth = arrow.width(), arrowHeight = arrow.height(), selectorWidth = this.selector.width(), selectorHeight = this.selector.height(), selectorPositionTop = this.selector.position().top, selectorPositionLeft = this.selector.position().left, pickerWidth = this.picker.width(), pickerHeight = this.picker.height(), defaultPlacement = 'bottom', result = this.defaultPlacement.split('-'), arrowBorderWidth = arrowWidth / 2;\n        if (result.length > 1) {\n            defaultPlacement = result[0];\n        }\n        else {\n            defaultPlacement = this.defaultPlacement;\n        }\n        if (defaultPlacement === 'bottom') {\n            var pickerPositionTop = selectorPositionTop + selectorHeight + arrowHeight;\n            var pickerPositionLeft = 0;\n            if ((selectorPositionLeft + pickerWidth) < tsdom_1.TsDom.select(window).width()) { // arrow left position\n                pickerPositionLeft = selectorPositionLeft;\n                this.picker\n                    .removeClass('is-arrow-right')\n                    .addClass('is-arrow-left');\n                var arrowLeftPosition = arrow.css('left');\n                var arrowAreaWidth = arrowLeftPosition + arrow.width() + Math.ceil(arrowLeftPosition / 2);\n                if (selectorWidth < arrowAreaWidth) { // centering left arrow\n                    pickerPositionLeft = pickerPositionLeft - Math.ceil((arrowLeftPosition + (arrowBorderWidth / 2)) - (selectorWidth / 2));\n                }\n            }\n            else { // arrow right position\n                pickerPositionLeft = (selectorPositionLeft + selectorWidth) - pickerWidth;\n                this.picker\n                    .removeClass('is-arrow-left')\n                    .addClass('is-arrow-right');\n                var arrowRightPosition = arrow.css('right');\n                var arrowAreaWidth = arrowRightPosition + arrow.width() + Math.ceil(arrowRightPosition / 2);\n                if (selectorWidth < arrowAreaWidth) {\n                    // 2px is hack fix for arrow with right position\n                    pickerPositionLeft = pickerPositionLeft + 3 + ((arrowRightPosition + (arrowBorderWidth / 2)) - (selectorWidth / 2));\n                }\n            }\n            this.picker.css('top', pickerPositionTop + 'px');\n            this.picker.css('left', pickerPositionLeft + 'px');\n        }\n        else if (defaultPlacement === 'top') {\n            var pickerPositionTop = selectorPositionTop - pickerHeight - arrowHeight;\n            var pickerPositionLeft = 0;\n            if ((selectorPositionLeft + pickerWidth) < tsdom_1.TsDom.select(window).width()) { // arrow left position\n                pickerPositionLeft = selectorPositionLeft;\n                this.picker.css('left', pickerPositionLeft + 'px');\n                this.picker\n                    .removeClass('is-arrow-right')\n                    .addClass('is-arrow-left');\n                var arrowLeftPosition = arrow.css('left');\n                var arrowAreaWidth = arrowLeftPosition + arrow.width() + Math.ceil(arrowLeftPosition / 2);\n                if (selectorWidth < arrowAreaWidth) { // centering left arrow\n                    pickerPositionLeft = pickerPositionLeft - Math.ceil((arrowLeftPosition + (arrowBorderWidth / 2)) - (selectorWidth / 2));\n                }\n            }\n            else { // arrow right position\n                pickerPositionLeft = (selectorPositionLeft + selectorWidth) - pickerWidth;\n                this.picker\n                    .removeClass('is-arrow-left')\n                    .addClass('is-arrow-right');\n                var arrowRightPosition = arrow.css('right');\n                var arrowAreaWidth = arrowRightPosition + arrow.width() + Math.ceil(arrowRightPosition / 2);\n                if (selectorWidth < arrowAreaWidth) {\n                    // 2px is hack fix for arrow with right position\n                    pickerPositionLeft = pickerPositionLeft + 3 + ((arrowRightPosition + (arrowBorderWidth / 2)) - (selectorWidth / 2));\n                }\n            }\n            this.picker.css('top', pickerPositionTop + 'px');\n            this.picker.css('left', pickerPositionLeft + 'px');\n        }\n        else if (defaultPlacement === 'left') {\n            var pickerPositionTop = selectorPositionTop;\n            var pickerPositionLeft = selectorPositionLeft - pickerWidth - arrowWidth;\n            if ((selectorPositionTop + pickerHeight) < tsdom_1.TsDom.select(window).height()) { // arrow top position\n                this.picker\n                    .removeClass('is-arrow-bottom')\n                    .addClass('is-arrow-top');\n                var arrowTopPosition = arrow.css('top');\n                var arrowAreaHeight = arrowTopPosition + arrowHeight + Math.ceil(arrowTopPosition / 2);\n                if (selectorHeight < arrowAreaHeight) { // centering left arrow\n                    pickerPositionTop = pickerPositionTop - Math.ceil((arrowTopPosition + (arrowBorderWidth / 2)) - (selectorHeight / 2));\n                }\n            }\n            else { // arrow bottom position\n                pickerPositionTop = (selectorPositionTop + selectorHeight) - pickerHeight;\n                this.picker\n                    .removeClass('is-arrow-top')\n                    .addClass('is-arrow-bottom');\n                var arrowBottomPosition = arrow.css('bottom');\n                var arrowAreaHeight = arrowBottomPosition + arrow.height() + Math.ceil(arrowBottomPosition / 2);\n                if (selectorHeight < arrowAreaHeight) {\n                    // 4px is hack fix for arrow with bottom position\n                    pickerPositionTop = pickerPositionTop + 4 + ((arrowBottomPosition + (arrowBorderWidth / 2)) - (selectorHeight / 2));\n                }\n            }\n            this.picker.css('top', pickerPositionTop + 'px');\n            this.picker.css('left', pickerPositionLeft + 'px');\n        }\n        else if (defaultPlacement === 'right') {\n            var pickerPositionTop = selectorPositionTop;\n            var pickerPositionLeft = selectorPositionLeft + selectorWidth + arrowWidth;\n            if ((selectorPositionTop + pickerHeight) < tsdom_1.TsDom.select(window).height()) { // arrow top position\n                this.picker\n                    .removeClass('is-arrow-bottom')\n                    .addClass('is-arrow-top');\n                var arrowTopPosition = arrow.css('top');\n                var arrowAreaHeight = arrowTopPosition + arrowHeight + Math.ceil(arrowTopPosition / 2);\n                if (selectorHeight < arrowAreaHeight) { // centering left arrow\n                    pickerPositionTop = pickerPositionTop - Math.ceil((arrowTopPosition + (arrowBorderWidth / 2)) - (selectorHeight / 2));\n                }\n            }\n            else { // arrow bottom position\n                pickerPositionTop = (selectorPositionTop + selectorHeight) - pickerHeight;\n                this.picker\n                    .removeClass('is-arrow-top')\n                    .addClass('is-arrow-bottom');\n                var arrowBottomPosition = arrow.css('bottom');\n                var arrowAreaHeight = arrowBottomPosition + arrow.height() + Math.ceil(arrowBottomPosition / 2);\n                if (selectorHeight < arrowAreaHeight) {\n                    // 4px is hack fix for arrow with bottom position\n                    pickerPositionTop = pickerPositionTop + 4 + ((arrowBottomPosition + (arrowBorderWidth / 2)) - (selectorHeight / 2));\n                }\n            }\n            this.picker.css('top', pickerPositionTop + 'px');\n            this.picker.css('left', pickerPositionLeft + 'px');\n        }\n    };\n    PickerPosition.prototype.destroy = function () {\n        this.scrollParent.off('scroll');\n        this.window.off('scroll');\n    };\n    PickerPosition.prototype.getScrollParent = function (node) {\n        var regex = /(auto|scroll)/;\n        var parents = function (_node, ps) {\n            if (_node.parentNode === null) {\n                return ps;\n            }\n            return parents(_node.parentNode, ps.concat([_node]));\n        };\n        var style = function (_node, prop) { return getComputedStyle(_node, null).getPropertyValue(prop); };\n        var overflow = function (_node) { return style(_node, 'overflow') + style(_node, 'overflow-y') + style(_node, 'overflow-x'); };\n        var scroll = function (_node) { return regex.test(overflow(_node)); };\n        /* eslint-disable consistent-return */\n        var scrollParent = function (_node) {\n            if (!(_node instanceof HTMLElement || _node instanceof SVGElement)) {\n                return;\n            }\n            var ps = parents(_node.parentNode, []);\n            for (var i = 0; i < ps.length; i += 1) {\n                if (scroll(ps[i])) {\n                    return ps[i];\n                }\n            }\n            return document.scrollingElement || document.documentElement;\n        };\n        return scrollParent(node);\n    };\n    return PickerPosition;\n}());\nexports.PickerPosition = PickerPosition;\n\n\n//# sourceURL=webpack://ColorPicker.Default/./src/ts/model/picker-position.ts?");

/***/ }),

/***/ "./src/ts/model/tsdom.ts":
/*!*******************************!*\
  !*** ./src/ts/model/tsdom.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TsDom = /** @class */ (function () {\n    /**\n     * Initialize selector\n     *\n     * @param {any | string} selector\n     * @param {HTMLElement | Document} context\n     */\n    function TsDom(selector, context) {\n        // Nodes collection array\n        this.nodes = [];\n        /**\n         * Pseudo selector for current node\n         *\n         * @type {string}\n         */\n        this.pseudoSelector = '';\n        this.callbacks = {};\n        if (!context) {\n            context = document;\n        }\n        if (typeof selector === 'string') {\n            if (selector[0] === '<' && selector[selector.length - 1] === \">\") {\n                this.nodes = [TsDom.createNode(selector)];\n            }\n            else {\n                if (selector.search(/(:before|:after)$/gi) !== -1) {\n                    var found = selector.match(/(:before|:after)$/gi);\n                    selector = selector.split(found[0])[0];\n                    this.pseudoSelector = found[0];\n                }\n                // Query DOM\n                this.nodes = [].slice.call(context.querySelectorAll(selector));\n            }\n        }\n        else if (selector instanceof NodeList) {\n            this.nodes = selector.length > 1 ? [].slice.call(selector) : [selector];\n        }\n        else if (selector instanceof HTMLDocument || selector instanceof Window || selector instanceof HTMLElement) {\n            this.nodes = [selector];\n        }\n    }\n    TsDom.select = function (selector, context) {\n        return new TsDom(selector, context);\n    };\n    TsDom.create = function (nodeName) {\n        return new TsDom(TsDom.createNode(nodeName));\n    };\n    TsDom.prototype.attr = function (attrName, attrValue) {\n        if (attrValue != undefined) {\n            this.each(this.nodes, function (node) {\n                node.setAttribute(attrName, attrValue);\n            });\n            return this;\n        }\n        return this.getLastNode().getAttribute(attrName);\n    };\n    /**\n     * Append content to nodes\n     *\n     * @param {HTMLElement} content\n     */\n    TsDom.prototype.append = function (content) {\n        var element;\n        if (content instanceof TsDom) {\n            element = content.get();\n        }\n        else {\n            element = content;\n        }\n        this.each(this.nodes, function (node) {\n            node.appendChild(element);\n        });\n        return this;\n    };\n    TsDom.prototype.parent = function () {\n        return new TsDom(this.getLastNode().parentNode);\n    };\n    /**\n     * Iteration per elements\n     *\n     * @param {HTMLElement[]} nodes\n     * @param {Function} callback\n     * @returns {TsDom}\n     */\n    TsDom.prototype.each = function (nodes, callback) {\n        if (nodes instanceof Function) {\n            callback = nodes;\n            nodes = this.nodes;\n        }\n        for (var i = 0; i < nodes.length; i++) {\n            callback.call(this.nodes[i], this.nodes[i], i);\n        }\n        return this;\n    };\n    TsDom.prototype.hasClass = function (className) {\n        return this.getLastNode().classList.contains(className);\n    };\n    /**\n     * Add css classes to element\n     *\n     * @param {string} className\n     * @returns {TsDom}\n     */\n    TsDom.prototype.addClass = function (className) {\n        if (className) {\n            var cssClasses_1 = className.split(' ');\n            this.each(this.nodes, function (node) {\n                for (var classIndex in cssClasses_1) {\n                    node.classList.add(cssClasses_1[classIndex]);\n                }\n            });\n        }\n        return this;\n    };\n    /**\n     * Remove css classes from element\n     *\n     * @param {string} className\n     * @returns {TsDom}\n     */\n    TsDom.prototype.removeClass = function (className) {\n        var cssClasses = className.split(' ');\n        this.each(this.nodes, function (node) {\n            for (var classIndex in cssClasses) {\n                node.classList.remove(cssClasses[classIndex]);\n            }\n        });\n        return this;\n    };\n    TsDom.prototype.html = function (content) {\n        this.each(this.nodes, function (node) {\n            node.innerHTML = content;\n        });\n    };\n    TsDom.prototype.find = function (selector) {\n        return new TsDom(selector, this.getLastNode());\n    };\n    TsDom.prototype.trigger = function (eventName, detail) {\n        var event = new CustomEvent(eventName, {\n            detail: detail\n        });\n        this.each(this.nodes, function (node) {\n            node.dispatchEvent(event);\n        });\n        return this;\n    };\n    TsDom.prototype.text = function (text) {\n        this.each(this.nodes, function (node) {\n            node.innerText = text;\n        });\n        return this;\n    };\n    /**\n     * Set ot Get css property from element\n     *\n     * @param styleName\n     * @param value\n     * @returns {any}\n     */\n    TsDom.prototype.css = function (styleName, value) {\n        if (typeof value == 'undefined') {\n            var node = this.getLastNode();\n            var result = null;\n            styleName = TsDom.convertToJsProperty(styleName);\n            if ((typeof node.getBoundingClientRect === \"function\") && !this.pseudoSelector) {\n                result = node.getBoundingClientRect()[styleName];\n            }\n            if (!result) {\n                var value_1 = getComputedStyle(node, this.pseudoSelector)[styleName];\n                if (value_1.search('px')) {\n                    result = parseInt(value_1, 10);\n                }\n            }\n            if (isNaN(result)) {\n                throw 'Undefined css property: ' + styleName;\n            }\n            return result;\n        }\n        else {\n            if (this.nodes.length > 1) {\n                this.each(this.nodes, function (node) {\n                    node.style[styleName] = value;\n                });\n            }\n            else {\n                this.nodes[0].style[styleName] = value;\n            }\n        }\n        return this;\n    };\n    /**\n     * Add event listener to element\n     *\n     * @param {string} eventName\n     * @param {Function} callback\n     * @returns {TsDom}\n     */\n    TsDom.prototype.on = function (eventName, callback) {\n        var _this = this;\n        this.each(this.nodes, function (node) {\n            var callbackFn = function (e) {\n                callback.call(node, e);\n            };\n            _this.callbacks[eventName] = callbackFn;\n            node.addEventListener(eventName, callbackFn);\n        });\n        return this;\n    };\n    TsDom.prototype.off = function (eventName) {\n        var callbackFn = this.callbacks[eventName];\n        this.each(this.nodes, function (node) {\n            node.removeEventListener(eventName, callbackFn, false);\n        });\n        return this;\n    };\n    TsDom.prototype.val = function (value) {\n        if (typeof value === 'undefined') {\n            return this.getLastNode().value;\n        }\n        this.each(this.nodes, function (node) {\n            node.value = value;\n        });\n        return this;\n    };\n    /**\n     * Check node type\n     *\n     * @param {string} tagName\n     * @returns {boolean}\n     */\n    TsDom.prototype.is = function (tagName) {\n        return this.getLastNode().tagName.toLowerCase() === tagName;\n    };\n    TsDom.prototype.get = function (index) {\n        if (index === void 0) { index = 0; }\n        return this.nodes[index];\n    };\n    TsDom.prototype.length = function () {\n        return this.nodes.length;\n    };\n    TsDom.prototype.hide = function () {\n        this.each(this.nodes, function (node) {\n            TsDom.select(node).css('display', 'none');\n        });\n        return this;\n    };\n    TsDom.prototype.show = function () {\n        this.each(this.nodes, function (node) {\n            TsDom.select(node).css('display', '');\n        });\n        return this;\n    };\n    TsDom.prototype.empty = function () {\n        this.each(this.nodes, function (node) {\n            TsDom.select(node).get().innerHTML = '';\n        });\n        return this;\n    };\n    TsDom.prototype.remove = function () {\n        this.each(this.nodes, function (node) {\n            node.remove();\n        });\n    };\n    TsDom.prototype.insertBefore = function (data) {\n        var element = this.resolveElement(data);\n        this.each(this.nodes, function (node) {\n            node.parentNode.insertBefore(element, element.previousSibling);\n        });\n        return this;\n    };\n    TsDom.prototype.insertAfter = function (contents) {\n        var element = this.resolveElement(contents);\n        this.each(this.nodes, function (node) {\n            node.parentNode.insertBefore(element, node.nextSibling);\n        });\n        return this;\n    };\n    TsDom.prototype.resolveElement = function (contents) {\n        var element;\n        if (TsDom.isHtml(contents)) {\n            element = TsDom.createNode(contents);\n        }\n        else if (contents instanceof HTMLElement) {\n            element = contents;\n        }\n        else if (contents instanceof TsDom) {\n            element = contents.get();\n        }\n        return element;\n    };\n    TsDom.prototype.closest = function (selector) {\n        return TsDom.select(this.getLastNode().closest(selector));\n    };\n    TsDom.prototype.data = function (dataName) {\n        return this.attr('data-' + dataName);\n    };\n    TsDom.prototype.width = function (value) {\n        if (value !== undefined) {\n            this.css('width', value);\n            return this;\n        }\n        if (this.getLastNode() === window) {\n            return parseInt(this.getLastNode().innerWidth, 10);\n        }\n        var width = this.css('width').toString();\n        var result = null;\n        if (width.search('px')) {\n            result = parseInt(this.css('width'), 10);\n        }\n        else {\n            result = width;\n        }\n        return result;\n    };\n    TsDom.prototype.height = function (value) {\n        if (value !== undefined) {\n            this.css('height', value);\n            return this;\n        }\n        if (this.getLastNode() === window) {\n            return parseInt(this.getLastNode().innerHeight, 10);\n        }\n        return parseInt(this.css('height'), 10);\n    };\n    TsDom.prototype.position = function () {\n        return {\n            top: Number(this.getLastNode().getBoundingClientRect().top),\n            bottom: Number(this.getLastNode().getBoundingClientRect().bottom),\n            left: Number(this.getLastNode().getBoundingClientRect().left),\n            right: Number(this.getLastNode().getBoundingClientRect().right),\n        };\n    };\n    TsDom.prototype.offset = function () {\n        return {\n            top: Number(this.getLastNode().offsetTop),\n            left: Number(this.getLastNode().offsetLeft)\n        };\n    };\n    TsDom.createNode = function (nodeName) {\n        if (nodeName[0] === '<' && nodeName[nodeName.length - 1] === \">\") {\n            var element = document.createElement('div');\n            element.innerHTML = nodeName;\n            return element.firstChild;\n        }\n        else {\n            return document.createElement(nodeName);\n        }\n    };\n    TsDom.isHtml = function (text) {\n        return text[0] === '<' && text[text.length - 1] === \">\";\n    };\n    /**\n     * Make css property notation to javascript property notation\n     *\n     * @param {string} propertyName\n     * @returns {string}\n     */\n    TsDom.convertToJsProperty = function (propertyName) {\n        propertyName = propertyName.toLowerCase().replace('-', ' ');\n        propertyName = propertyName.replace(/(^| )(\\w)/g, function (x) {\n            return x.toUpperCase();\n        });\n        propertyName = propertyName.charAt(0).toLowerCase() + propertyName.slice(1);\n        return propertyName.replace(' ', '');\n    };\n    /**\n     *\n     * @returns {any}\n     */\n    TsDom.prototype.getLastNode = function () {\n        return this.nodes[this.nodes.length - 1];\n    };\n    return TsDom;\n}());\nexports.TsDom = TsDom;\n\n\n//# sourceURL=webpack://ColorPicker.Default/./src/ts/model/tsdom.ts?");

/***/ })

/******/ });
});